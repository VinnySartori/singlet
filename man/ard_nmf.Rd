% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ard_nmf.R
\name{ard_nmf}
\alias{ard_nmf}
\title{Automatic Rank Determination NMF}
\usage{
ard_nmf(
  A,
  k_init = 2,
  n_replicates = 3,
  tol = 1e-05,
  cv_tol = 1e-04,
  maxit = 100,
  verbose = 1,
  L1 = 0.01,
  L2 = 0,
  threads = 0,
  test_density = 0.05,
  learning_rate = 0.8,
  tol_overfit = 1e-04,
  trace_test_mse = 5
)
}
\arguments{
\item{A}{sparse matrix (ideally variance-stabilized) of data for genes x cells (rows x columns)}

\item{k_init}{initial rank at which to begin search for local minimum. \code{k_init = 2} is a reasonable default, higher values can lead to swift convergence to a local minmum.}

\item{n_replicates}{number of random test sets}

\item{tol}{tolerance of the final fit}

\item{cv_tol}{tolerance for cross-validation}

\item{maxit}{maximum number of iterations}

\item{verbose}{no output (0/FALSE), rank-level output (1/TRUE) and step size info (2) and individual model fitting updates (3)}

\item{L1}{L1/LASSO penalty to increase sparsity of model}

\item{L2}{L2/Ridge penalty to increase angles between factors}

\item{threads}{number of threads for parallelization across CPUs, 0 = use all available threads}

\item{test_density}{fraction of values to include in the test set}

\item{learning_rate}{exponent on step size for automatic rank determination}

\item{tol_overfit}{stopping criterion, maximum increase in test set reconstruction error at any iteration compared to test set reconstruction error at \code{trace_test_mse}}

\item{trace_test_mse}{first iteration at which to calculate test set reconstruction error, and the error to compare all later iterations to when determining whether overfitting has occurred.}
}
\description{
ARD NMF quickly finds the optimal rank for an NMF model using an exponentially variable learning rate and basic coordinate descent.
}
\details{
If running ard_nmf() standalone, the following coercion can be useful:

res <- ard_nmf(data_matrix, ...)
plot(res$cv_data) # rank finding
nmfres <- as(res, "nmf") # other

This coercion allows AnnotateNMF, AnnotationPlot, etc. to work on `nmfres`
directly, rather than assuming a Seurat-like class structure is present.
The coercion simply checks the dimensions of res$w, res$d, and res$h,
then shoves all other list elements from res into nmfres@misc.
}
